SOLID
S- single responsability. Класс должен отвечать за что-то одно. В случае изменения должен затрагиваться только 1 класс. В 1 классе должны быть функции из 1 сущности. Т.е. класс
должен отвечать за взаимодействие с авто. Другой за работу с клиентом. 3-й за манипуляции с авто в бд.
O- open-closed. Модуль должен быть открыт для расширения, но закрыт для изменения. Небольшое изменения класса не должно затрагивать кучу модулей.
L- Liskov substitution. Необходимо чтобы подклассы могли служить заменой для своих суперклассов. Классы наследники могут спокойно исопльзовать классы родителей.
I- Interface segregation. Сущности не должны зависеть от интерфейсов, котрые они используют. Класс потомок может получить кучу не нужной функциональности, которая не используется.
Решается просто- интерфейс нужно разбивать на 2,3 и более. Т.е. не должно быть такого что 1 интерфейс кучу функций имеет.
D- Dependency inversion. Верхнеуровневые сущности не должны зависеть от нижнеуровневых реализаций. А любые зависимости лучше всего выносить в абстракции.